{{- $chartName := .Chart.Name -}}
{{- $releaseName := .Release.Name -}}
{{- $namespace := .Values.namespace | default "default" -}}
{{- $serviceType := .Values.service.type | default "ClusterIP" -}}

Thank you for installing {{ $chartName }}!

Release Name: {{ $releaseName }}
Namespace:    {{ $namespace }}

----------------------------------
CHART INFORMATION
----------------------------------
Chart Version: {{ .Chart.Version }}
App Version:   {{ .Chart.AppVersion }}

----------------------------------
STATUS & USAGE
----------------------------------
To check the status of your release:
  helm status {{ $releaseName }}

To list all resources in this release:
  helm get manifest {{ $releaseName }}

You can also see all resources via kubectl:
  kubectl get all -n {{ $namespace }} -l app=go-app

{{- if eq $serviceType "LoadBalancer" }}
----------------------------------
ACCESSING YOUR APPLICATION (LoadBalancer)
----------------------------------
The Service is of type LoadBalancer. Once MetalLB (or your cloud provider)
assigns an external IP, you can retrieve it by running:

  kubectl get svc go-app-service -n {{ $namespace }}

Then access the application at:
  http://<EXTERNAL-IP>:{{ .Values.service.port }}

{{- else if eq $serviceType "NodePort" }}
----------------------------------
ACCESSING YOUR APPLICATION (NodePort)
----------------------------------
The Service is of type NodePort. You can retrieve the port number by running:

  kubectl get svc go-app-service -n {{ $namespace }}

Then access the application at:
  http://<NODE-IP>:<NODE-PORT>

{{- else }}
----------------------------------
ACCESSING YOUR APPLICATION (ClusterIP)
----------------------------------
The Service is of type ClusterIP. To test within the cluster, you can run
a port-forward:

  kubectl port-forward -n {{ $namespace }} svc/go-app-service 8080:{{ .Values.service.port }}

Then open:
  http://localhost:8080/

{{- end }}

{{- if .Values.ingress.enabled }}
----------------------------------
INGRESS CONFIGURATION
----------------------------------
An Ingress object named "go-app-ingress" was created.
Host: {{ .Values.ingress.host }}
Path: {{ .Values.ingress.path }}
PathType: {{ .Values.ingress.pathType }}

If your DNS is configured to route "{{ .Values.ingress.host }}"
to your cluster/ingress controller, you can access the app at:

  http://{{ .Values.ingress.host }}{{ .Values.ingress.path }}

{{- if .Values.ingress.traefikTls.certresolver }}
----------------------------------
TRAEFIK TLS
----------------------------------
Because "ingress.traefikTls.certresolver={{ .Values.ingress.traefikTls.certresolver }}"
is set, Traefik will attempt to serve HTTPS for the domain:
  https://{{ .Values.ingress.host }}{{ .Values.ingress.path }}

Be sure your Traefik is configured to handle the chosen certresolver
(e.g., route53resolver or another).
{{- end }}

{{- end }}

{{- if .Values.logging.enabled }}
----------------------------------
LOGGING
----------------------------------
File-based logging is enabled. The container reads the LOG_FILE path from
a ConfigMap named "go-app-logs-config."

LOG_FILE path: {{ .Values.logging.logFile }}

{{- if and .Values.logging.persistentVolume.enabled (hasKey .Values.logging "persistentVolume") }}
A PersistentVolumeClaim named "go-app-logs-pvc" was created to persist
the logs at "/app/logs."
{{- end }}

{{- end }}

----------------------------------
NOTES
----------------------------------
- If you enabled the HorizontalPodAutoscaler (HPA), you can see it with:
    kubectl get hpa -n {{ $namespace }}

- To uninstall the release and all its resources:
    helm uninstall {{ $releaseName }}
    kubectl delete namespace {{ $namespace }}    # (If you want to remove the namespace)

Thank you for using {{ $chartName }}!